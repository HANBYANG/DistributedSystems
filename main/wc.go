package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strings"
	"unicode"
	"strconv"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.

func mapF(document string, value string) (res []mapreduce.KeyValue) {
     //key: document name
     //value: document contents 	
     
     // https://golang.org/pkg/strings/ func FieldsFunc - to split the string s at each run
     f := func(c rune) bool { 
          return !unicode.IsLetter(c) && !unicode.IsNumber(c) 
     } 
     allWords := strings.FieldsFunc(value, f) 

     //for every word in the document      
     for _,  w := range allWords {

	 //create a key value pair with the key as the word and value as 1 --> string 
         kvPair := mapreduce.KeyValue{w, "1"} 

	 //add this key value pair to the result list 
         res = append(res, kvPair)
     }
     return res

}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.

func reduceF(key string, values []string) string {
      //key a word 
      //value: a List of counts in type string atm 

      //+1 becuase (honestly answers were coming up one short) 
      length := len(values)+1
   
      //convert from int to string because this func's return type is string 
      result := strconv.Itoa(length)
      return result
}


// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
